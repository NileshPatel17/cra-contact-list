{"version":3,"sources":["components/header/index.tsx","components/contact-create/index.tsx","components/contact-list/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","props","className","onClick","onNewContact","onGotoHome","ContactForm","initialValues","id","firstName","lastName","gender","email","phone","address","getCallback","validationSchema","Yup","shape","required","oneOf","matches","message","excludeEmptyString","onSubmit","values","actions","console","log","onAddContact","render","formikBag","handleSubmit","data-test","htmlFor","name","field","form","Fragment","placeholder","touched","errors","onChange","event","setFieldValue","target","value","style","display","label","type","ContactList","contactList","length","map","contact","key","defaultContactList","App","useState","createNewContact","setCreateNewContact","setContactList","formData","totalContacts","concat","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df29803d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IHeader {\n  onGotoHome: () => void;\n  onNewContact: () => void;\n}\nexport const Header: React.SFC<IHeader> = (props: IHeader) => {\n  return (\n    <nav className=\"flex items-center justify-between flex-wrap bg-blue-500 p-4\">\n      <div className=\"flex items-center flex-shrink-0 text-white mr-6\">\n        <span className=\"font-semibold text-xl tracking-tight\">\n          Simple Contact App\n        </span>\n      </div>\n      <div className=\"w-full block flex flex-row-reverse lg:items-center lg:w-auto\">\n        <span>\n          <a\n            onClick={props.onNewContact}\n            className=\"cursor-pointer block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\"\n          >\n            Create New Contact\n          </a>\n        </span>\n        <span>\n          <a\n            onClick={props.onGotoHome}\n            className=\"cursor-pointer block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\"\n          >\n            Contact List\n          </a>\n        </span>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Formik, FieldProps, Field, FormikProps, FormikActions } from 'formik';\nimport * as Yup from 'yup';\nimport { IContact } from '../../models';\n\nconst contactFormSchema = () => {\n  return Yup.object().shape({\n    firstName: Yup.string().required('first name is required'),\n    lastName: Yup.string().required('last name is required'),\n    email: Yup.string()\n      .required('required')\n      .email('Email is not valid'),\n    gender: Yup.mixed<'male' | 'female'>().oneOf(['male', 'female']),\n    phone: Yup.string()\n      .required('required')\n      .matches(/^\\d{10}$/, {\n        message: 'Please enter valid phone number must be of 10 digits.',\n        excludeEmptyString: false\n      }),\n    address: Yup.string()\n  });\n};\n\ninterface IContactFormProps {\n  onAddContact: (formData: IContact) => void;\n}\n\nexport const ContactForm: React.SFC<IContactFormProps> = (\n  props: IContactFormProps\n) => {\n  const initialValues: IContact = {\n    id: 0,\n    firstName: '',\n    lastName: '',\n    gender: '',\n    email: '',\n    phone: '',\n    address: '',\n    getCallback: false\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={contactFormSchema()}\n      // validateOnBlur={false}\n      onSubmit={(values: IContact, actions: FormikActions<IContact>) => {\n        console.log('submit', values);\n        props.onAddContact(values);\n      }}\n      render={(formikBag: FormikProps<IContact>) => (\n        <form onSubmit={formikBag.handleSubmit} className=\"w-full max-w-lg border border-blue400 border-round m-4 p-4\">\n          <div className=\"font-bold text-xl mb-2 ml-2\" data-test='data-new-contact'>Create New Contact</div>\n          <div className=\"flex flex-wrap w-700\">\n            <div className=\"w-full lg:w-1/2 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"firstName\"\n                className=\"text-sm block font-bold  pt-2 pb-2\"\n              >\n                First Name\n              </label>\n              <Field\n                name=\"firstName\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <input\n                      name=\"firstName\"\n                      data-test=\"input-firstName\"\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \"\n                      placeholder=\"First Name\"\n                      {...field}\n                    />\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.firstName &&\n                        form.errors.firstName &&\n                        form.errors.firstName}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/2 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"lastName\"\n                className=\"text-sm block font-bold  pt-2 pb-2\"\n              >\n                Last Name\n              </label>\n              <Field\n                name=\"lastName\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <input\n                      name=\"lastName\"\n                      data-test=\"input-lastName\"\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \"\n                      placeholder=\"Last Name\"\n                      {...field}\n                    />\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.lastName &&\n                        form.errors.lastName &&\n                        form.errors.lastName}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/2 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"gender\"\n                className=\"text-sm block font-bold  pt-2 pb-2\"\n              >\n                Gender\n              </label>\n              <Field\n                name=\"gender\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <select\n                      name=\"gender\"\n                      className=\"block appearance-none w-full border rounded text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:shadow-outline border-blue-300\"\n                      // {...field}\n                      onChange={event => {\n                        console.log(form.errors);\n                        formikBag.setFieldValue(field.name, event.target.value);\n                      }}\n                      style={{ display: 'block' }}\n                    >\n                      <option value=\"\" label=\"Select Gender\" />\n                      <option value=\"male\" label=\"Male\" />\n                      <option value=\"female\" label=\"Female\" />\n                    </select>\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.gender &&\n                        form.errors.gender &&\n                        form.errors.gender}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/2 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"email\"\n                className=\"text-sm block font-bold pt-2 pb-2\"\n              >\n                email address\n              </label>\n              <Field\n                name=\"email\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <input\n                      name=\"email\"\n                      data-test=\"input-email\"\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \"\n                      placeholder=\"Email\"\n                      {...field}\n                    />\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.email &&\n                        form.errors.email &&\n                        form.errors.email}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/1 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"email\"\n                className=\"text-sm block font-bold pt-2 pb-2 pm-3\"\n              >\n                Phone Number\n              </label>\n              <Field\n                name=\"phone\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <input\n                      name=\"phone\"\n                      data-test=\"input-phone\"\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \"\n                      placeholder=\"Phone\"\n                      {...field}\n                    />\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.phone &&\n                        form.errors.phone &&\n                        form.errors.phone}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/1 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"address\"\n                className=\"text-sm block font-bold pt-2 pb-2\"\n              >\n                Address\n              </label>\n              <Field\n                name=\"address\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <textarea\n                      name=\"address\"\n                      data-test=\"input-address\"\n                      className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \"\n                      placeholder=\"Address\"\n                      {...field}\n                    />\n                    <span className=\"text-red-500 text-xs italic\">\n                      {form.touched.address &&\n                        form.errors.address &&\n                        form.errors.address}\n                    </span>\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-2/3 px-3 mb-6 md:mb-0\">\n              <label\n                htmlFor=\"email\"\n                className=\"text-sm block font-bold pt-2 pb-2\"\n              >\n                Would like to get callback\n              </label>\n              <Field\n                name=\"getCallback\"\n                render={({ field, form }: FieldProps<IContact>) => (\n                  <React.Fragment>\n                    <input\n                      name=\"getCallback\"\n                      type=\"checkbox\"\n                      className=\"mr-2 leading-tight\"\n                      placeholder=\"getCallback\"\n                      {...field}\n                    />\n                  </React.Fragment>\n                )}\n              />\n            </div>\n            <div className=\"w-full lg:w-1/1 px-3 mb-6 md:mb-0\">\n              <button data-test='btn-add-contact'\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n                type=\"submit\"\n              >\n                Create\n              </button>\n            </div>\n          </div>\n        </form>\n      )}\n    />\n  );\n};\n","import React from 'react';\nimport { IContact } from '../../models';\n\ninterface IContactListProps {\n  contactList: IContact[];\n}\nexport const ContactList: React.SFC<IContactListProps> = (\n  props: IContactListProps\n) => {\n  const { contactList } = props;\n  return (\n    <div className=\"p-4\">\n      <div className=\"font-bold text-xl mb-2\">Contact List</div>\n      <div className=\"flex\">\n        <div className=\"flex-1 bg-gray-400 h-6\">First Name</div>\n        <div className=\"flex-1 bg-gray-400 h-6\">Last Name</div>\n        <div className=\"flex-1 bg-gray-400 h-6\">Email</div>\n        <div className=\"flex-1 bg-gray-400 h-6\">Phone Number</div>\n        <div className=\"flex-1 bg-gray-400 h-6\">Address</div>\n      </div>\n      {contactList.length === 0 && <div>No records</div>}\n      {contactList.map((contact: IContact) => {\n        return (\n          <div className=\"flex _contact-item_\" key={contact.id}>\n            <div className=\"flex-1 h-6\">{contact.firstName}</div>\n            <div className=\"flex-1 h-6\">{contact.lastName}</div>\n            <div className=\"flex-1 h-6\">{contact.email}</div>\n            <div className=\"flex-1 h-6\">{contact.phone}</div>\n            <div className=\"flex-1 h-6\">{contact.address}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Header } from './components/header';\nimport { ContactForm } from './components/contact-create';\nimport { ContactList } from './components/contact-list';\nimport { IContact } from './models';\n\nconst defaultContactList: IContact[] = [];\nfunction App() {\n  const [createNewContact, setCreateNewContact] = useState(false);\n  const [contactList, setContactList] = useState(defaultContactList);\n  const onAddContact = (formData: IContact) => {\n    const totalContacts = contactList.length;\n    formData.id = totalContacts + 1;\n    setContactList(contactList.concat(formData));\n    setCreateNewContact(false);\n  };\n  return (\n    <div>\n      <Header\n        onGotoHome={() => setCreateNewContact(false)}\n        onNewContact={() => setCreateNewContact(true)}\n      />\n      {createNewContact ? (\n        <ContactForm onAddContact={onAddContact} />\n      ) : (\n        <ContactList contactList={contactList} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles/tailwind.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}